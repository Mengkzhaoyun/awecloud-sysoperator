/*
Copyright The Beagle Cloud 2018-2022 Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = "proto2";

package github.com.mengkzhaoyun.awecloud_sysoperator.pkg.apis.bcc.v1;

import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "github.com/mengkzhaoyun/awecloud-sysoperator/pkg/apis/bcc/v1";

// BgAppDeploy is the Schema for the bgappdeploys API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgappdeploys,scope=Namespaced
message BgAppDeploy {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgAppDeploySpec spec = 2;

  optional BgAppDeployStatus status = 3;
}

// BgAppDeployList contains a list of BgAppDeploy
message BgAppDeployList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgAppDeploy items = 2;
}

// BgAppDeploySpec defines the desired state of BgAppDeploy
message BgAppDeploySpec {
  optional string user = 1;

  // 用户
  optional string app = 2;

  // 部署的应用id
  optional string deployName = 3;

  // 部署应用名称
  optional string group = 4;

  // 分组
  optional string notes = 5;
}

// BgAppDeployStatus defines the observed state of BgAppDeploy
message BgAppDeployStatus {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 1;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 2;
}

// BgAppStore is the Schema for the bgappstores API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgappstores,scope=Cluster
message BgAppStore {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgAppStoreSpec spec = 2;

  optional BgAppStoreStatus status = 3;
}

// BgAppStoreList contains a list of BgAppStore
message BgAppStoreList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgAppStore items = 2;
}

// BgAppStoreSpec defines the desired state of BgAppStore
message BgAppStoreSpec {
  optional string name = 1;

  // 中文名称
  optional string logo = 2;

  // 图标
  optional string version = 3;

  // 版本号
  optional string step = 4;

  // step 文件
  optional string values = 5;

  // values 文件
  optional string chartName = 6;

  // chart 名称
  optional string readme = 7;

  // readme 文件
  optional string chart = 8;

  // chart 内容
  optional int32 state = 9;
}

// BgAppStoreStatus defines the observed state of BgAppStore
message BgAppStoreStatus {
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 1;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 2;
}

// BgCloudShell is the Schema for the bgcloudshells API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgcloudshells,scope=Cluster
message BgCloudShell {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgCloudShellSpec spec = 2;

  optional BgCloudShellStatus status = 3;
}

// BgCloudShellList contains a list of BgCloudShell
message BgCloudShellList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgCloudShell items = 2;
}

// BgCloudShellSpec defines the desired state of BgCloudShell
// +k8s:openapi-gen=true
message BgCloudShellSpec {
  optional string user = 1;

  optional string namespace = 2;
}

// BgCloudShellStatus defines the observed state of BgCloudShell
// +k8s:openapi-gen=true
message BgCloudShellStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;

  // RepositoryShell , Pod Namespace
  // +optional
  optional string repositoryshell = 4;

  // RepositoryDocker , Pod Namespace
  // +optional
  optional string repositorydocker = 5;

  // PodNamespace , Pod Namespace
  // +optional
  optional string podnamespace = 6;

  // PodName , Pod Name
  // +optional
  optional string podname = 7;

  // PodContainer , Pod Namespace
  // +optional
  optional string podcontainer = 8;
}

// BgCluster is the Schema for the bgclusters API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgclusters,scope=Cluster
message BgCluster {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgClusterSpec spec = 2;

  optional BgClusterStatus status = 3;
}

// BgClusterList contains a list of BgCluster
message BgClusterList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgCluster items = 2;
}

// BgClusterSpec defines the desired state of BgCluster
// +k8s:openapi-gen=true
message BgClusterSpec {
  optional string alias = 1;

  optional string apiserver = 2;

  optional string metricserver = 3;

  optional string satoken = 4;

  // gaoshiyao
  optional string status = 5;

  // 是否在线 up | down
  optional string clusterType = 6;

  // 集群类型 core | member
  optional string city = 7;

  optional string computerName = 8;

  optional string node = 9;

  optional string cpu = 10;

  optional string memory = 11;

  optional string fs = 12;

  optional string des = 13;
}

// BgClusterStatus defines the observed state of BgCluster
// +k8s:openapi-gen=true
message BgClusterStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgGroup is the Schema for the bggroups API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bggroups,scope=Cluster
message BgGroup {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgGroupSpec spec = 2;

  optional BgGroupStatus status = 3;
}

// BgGroupList contains a list of BgGroup
message BgGroupList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgGroup items = 2;
}

// BgGroupNamespace is the Schema for the bggroupnamespaces API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bggroupnamespaces,scope=Cluster
message BgGroupNamespace {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgGroupNamespaceSpec spec = 2;

  optional BgGroupNamespaceStatus status = 3;
}

// BgGroupNamespaceList contains a list of BgGroupNamespace
message BgGroupNamespaceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgGroupNamespace items = 2;
}

// BgGroupNamespaceSpec defines the desired state of BgGroupNamespace
// +k8s:openapi-gen=true
message BgGroupNamespaceSpec {
  optional string group = 1;

  optional string namespace = 2;
}

// BgGroupNamespaceStatus defines the observed state of BgGroupNamespace
// +k8s:openapi-gen=true
message BgGroupNamespaceStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgGroupSpec defines the desired state of BgGroup
// +k8s:openapi-gen=true
message BgGroupSpec {
  optional string alias = 1;

  optional string user = 2;

  optional string desc = 3;

  optional string default = 4;
}

// BgGroupStatus defines the observed state of BgGroup
// +k8s:openapi-gen=true
message BgGroupStatus {
  // 创建人
  // +optional
  optional string creator = 2;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 3;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 4;

  // 分组下的命名空间
  repeated string namespaces = 5;

  // 分组下的用户
  repeated string users = 6;

  // The generation observed by the BgGroup controller.
  // +optional
  optional int64 observedGeneration = 1;
}

// BgGroupUser is the Schema for the bggroupusers API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bggroupusers,scope=Cluster
message BgGroupUser {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgGroupUserSpec spec = 2;

  optional BgGroupUserStatus status = 3;
}

// BgGroupUserList contains a list of BgGroupUser
message BgGroupUserList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgGroupUser items = 2;
}

// BgGroupUserSpec defines the desired state of BgGroupUser
// +k8s:openapi-gen=true
message BgGroupUserSpec {
  optional string group = 1;

  optional string user = 2;

  optional string role = 3;

  // 操作状态， Running , Completed
  optional string state = 4;
}

// BgGroupUserStatus defines the observed state of BgGroupUser
// +k8s:openapi-gen=true
message BgGroupUserStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgLoginLog is the Schema for the bgloginlogs API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgloginlogs,scope=Cluster
message BgLoginLog {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgLoginLogSpec spec = 2;

  optional BgLoginLogStatus status = 3;
}

// BgLoginLogList contains a list of BgLoginLog
message BgLoginLogList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgLoginLog items = 2;
}

// BgLoginLogSpec defines the desired state of BgLoginLog
message BgLoginLogSpec {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  repeated Log logs = 1;
}

// BgLoginLogStatus defines the observed state of BgLoginLog
message BgLoginLogStatus {
  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 1;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 2;
}

// BgMenu is the Schema for the bgmenus API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgmenus,scope=Cluster
message BgMenu {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgMenuSpec spec = 2;

  optional BgMenuStatus status = 3;
}

// BgMenuList contains a list of BgMenu
message BgMenuList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgMenu items = 2;
}

// BgMenuSpec defines the desired state of BgMenu
message BgMenuSpec {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  optional string alias = 1;

  repeated string roles = 2;

  optional string href = 3;

  optional string icon = 4;

  optional string iconhov = 5;

  optional bool group = 6;

  optional bool namespace = 7;

  optional bool is_new_tab = 8;

  repeated BgMenuSpec submenus = 9;
}

// BgMenuStatus defines the observed state of BgMenu
message BgMenuStatus {
  // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 1;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 2;
}

// BgNamespace is the Schema for the bgnamespaces API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgnamespaces,scope=Cluster
message BgNamespace {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgNamespaceSpec spec = 2;

  optional BgNamespaceStatus status = 3;
}

// BgNamespaceLimit
message BgNamespaceLimit {
  optional string cpu = 1;

  optional string memory = 2;
}

// BgNamespaceLimitRange
message BgNamespaceLimitRange {
  optional string limit_cpu = 1;

  optional string limit_memory = 2;

  optional string request_cpu = 3;

  optional string request_memory = 4;
}

// BgNamespaceList contains a list of BgNamespace
message BgNamespaceList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgNamespace items = 2;
}

// BgNamespaceSpec defines the desired state of BgNamespace
message BgNamespaceSpec {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  optional string namespace = 1;

  optional string alias = 2;

  optional string des = 3;

  optional BgNamespaceLimit limit = 4;

  optional int64 pod = 5;

  optional BgNamespaceLimitRange limit_range = 6;

  optional string group = 7;

  optional string class = 8;

  optional string approval = 9;

  // 创建人
  // +optional
  optional string creator = 10;
}

// BgNamespaceStatus defines the observed state of BgNamespace
message BgNamespaceStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgNodeAdd is the Schema for the bgnodeadds API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgnodeadds,scope=Cluster
message BgNodeAdd {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgNodeAddSpec spec = 2;

  optional BgNodeAddStatus status = 3;
}

// BgNodeAddList contains a list of BgNodeAdd
message BgNodeAddList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgNodeAdd items = 2;
}

// BgNodeAddSpec defines the desired state of BgNodeAdd
message BgNodeAddSpec {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  optional string image = 1;

  // 集群
  optional string createUser = 2;

  // 创建用户
  optional string clusterName = 3;

  // 集群名称
  optional string city = 4;

  // 城市
  optional string computerRoom = 5;

  // 机房
  optional string createStatus = 6;

  // 创建状态
  optional string hosts = 7;

  // hosts 文件
  optional string systech = 8;
}

// BgNodeAddStatus defines the observed state of BgNodeAdd
message BgNodeAddStatus {
  // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 1;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 2;
}

// BgRole is the Schema for the bgroles API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgroles,scope=Cluster
message BgRole {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgRoleSpec spec = 2;

  optional BgRoleStatus status = 3;
}

// BgRoleList contains a list of BgRole
message BgRoleList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgRole items = 2;
}

// BgRoleSpec defines the desired state of BgRole
// +k8s:openapi-gen=true
message BgRoleSpec {
  optional string id = 1;

  optional string alias = 2;

  optional string desc = 3;
}

// BgRoleStatus defines the observed state of BgRole
// +k8s:openapi-gen=true
message BgRoleStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgRoleUser is the Schema for the bgroleusers API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgroleusers,scope=Cluster
message BgRoleUser {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgRoleUserSpec spec = 2;

  optional BgRoleUserStatus status = 3;
}

// BgRoleUserList contains a list of BgRoleUser
message BgRoleUserList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgRoleUser items = 2;
}

// BgRoleUserSpec defines the desired state of BgRoleUser
// +k8s:openapi-gen=true
message BgRoleUserSpec {
  optional string role = 1;

  optional string user = 2;
}

// BgRoleUserStatus defines the observed state of BgRoleUser
// +k8s:openapi-gen=true
message BgRoleUserStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;

  // 角色编号
  // +optional
  optional string roleid = 4;
}

// BgSetting is the Schema for the bgsettings API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgsettings,scope=Cluster
message BgSetting {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  map<string, string> spec = 2;

  optional BgSettingStatus status = 3;
}

// BgSettingList contains a list of BgSetting
message BgSettingList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgSetting items = 2;
}

// BgSettingStatus defines the observed state of BgSetting
message BgSettingStatus {
}

// BgStorage is the Schema for the bgstorages API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgstorages,scope=Namespaced
message BgStorage {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgStorageSpec spec = 2;

  optional BgStorageStatus status = 3;
}

// BgStorageList contains a list of BgStorage
message BgStorageList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgStorage items = 2;
}

// BgStorageSpec defines the desired state of BgStorage
message BgStorageSpec {
  // INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
  // Important: Run "operator-sdk generate k8s" to regenerate code after modifying this file
  // Add custom validation using kubebuilder tags: https://book-v1.book.kubebuilder.io/beyond_basics/generating_crd.html
  optional string storageName = 1;

  optional string volume = 2;

  optional string storageClass = 3;

  optional string oldStorage = 4;

  optional string newStorage = 5;

  optional string class = 6;

  repeated string accessModes = 7;

  optional string approval = 8;

  // 创建人
  // +optional
  optional string creator = 9;
}

// BgStorageStatus defines the observed state of BgStorage
message BgStorageStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgToken is the Schema for the bgtokens API
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgtokens,scope=Cluster
message BgToken {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgTokenSpec spec = 2;

  optional BgTokenStatus status = 3;
}

// BgTokenList contains a list of BgToken
message BgTokenList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgToken items = 2;
}

// BgTokenSpec defines the desired state of BgToken
// +k8s:openapi-gen=true
message BgTokenSpec {
  // 用户
  optional UserInfo user = 1;
}

// BgTokenStatus defines the observed state of BgToken
// +k8s:openapi-gen=true
message BgTokenStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;
}

// BgUser is the Schema for the bgusers API
// +k8s:openapi-gen=true
// +kubebuilder:subresource:status
// +kubebuilder:resource:path=bgusers,scope=Cluster
message BgUser {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional BgUserSpec spec = 2;

  optional BgUserStatus status = 3;
}

// BgUserDefault defines the observed state of BgUser
// +k8s:openapi-gen=true
message BgUserDefault {
  optional string group = 1;

  optional string cluster = 2;
}

// BgUserGroup defines the observed state of BgUser
// +k8s:openapi-gen=true
message BgUserGroup {
  optional string name = 1;

  optional string role = 2;

  optional string namespace = 3;

  repeated string namespaces = 4;
}

// BgUserList contains a list of BgUser
message BgUserList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  repeated BgUser items = 2;
}

// BgUserSpec defines the desired state of BgUser
// +k8s:openapi-gen=true
message BgUserSpec {
  optional string alias = 1;

  optional string phone = 2;

  optional string email = 3;

  optional string avatar = 4;

  optional bool disable = 5;

  optional string password = 6;

  optional BgUserDefault default = 7;

  optional string centerAdmin = 8;

  // 中心管理员开关 off on
  optional string saAdmin = 9;
}

// BgUserStatus defines the observed state of BgUser
// +k8s:openapi-gen=true
message BgUserStatus {
  // 创建人
  // +optional
  optional string creator = 1;

  // 创建时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 2;

  // 运行状态， Running , Completed
  // +optional
  optional string phase = 3;

  // Token ， 会Watch ServiceAccount.Secrets，随之变化
  // +optional
  optional string token = 4;

  // 分组
  // +optional
  map<string, BgUserGroup> groups = 5;

  // 角色
  // +optional
  repeated string roles = 6;

  // 用户设置密码以后，密码Password将会从Spec从删除加密保存在Status之中
  // +optional
  optional string password = 7;

  // 在用户进入垃圾回收时，设置Disable=true
  // +optional
  optional bool disable = 8;

  // 用户最后一次登录时间
  // +optional
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time lastLogin = 9;
}

// ExtraValue masks the value so protobuf can generate
// +protobuf.nullable=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
message ExtraValue {
  // items, if empty, will result in an empty slice

  repeated string items = 1;
}

message Log {
  optional string ip = 1;

  optional string username = 2;

  optional int32 operatorType = 3;

  // 操作类型  1 登录 | 2 登出  | 3 新增 | 4 修改 | 5 删除
  optional string content = 4;

  // 操作内容
  optional int32 result = 5;

  // 操作结果  0 失败 | 1 成功
  optional k8s.io.apimachinery.pkg.apis.meta.v1.Time created = 6;
}

// UserInfo holds the information about the user needed to implement the
// user.Info interface.
message UserInfo {
  // The name that uniquely identifies this user among all active users.
  // +optional
  optional string username = 1;

  // A unique value that identifies this user across time. If this user is
  // deleted and another user by the same name is added, they will have
  // different UIDs.
  // +optional
  optional string uid = 2;

  // The names of groups this user is a part of.
  // +optional
  repeated string groups = 3;

  // Any additional information provided by the authenticator.
  // +optional
  map<string, ExtraValue> extra = 4;
}

